$date
	Wed May 05 03:43:31 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module divider_test $end
$var wire 1 ! STATE $end
$var wire 1 " Done $end
$var reg 1 # CLK $end
$var reg 1 $ LOAD $end
$var reg 1 % SHIFT $end
$var reg 1 & ST $end
$var reg 5 ' Y1 [4:0] $end
$var reg 5 ( Y2 [4:0] $end
$scope module UUT $end
$var wire 1 # CLK $end
$var wire 1 ) LD $end
$var wire 1 * SH $end
$var wire 1 ! STATE $end
$var wire 1 + TIK $end
$var wire 5 , Xout [4:0] $end
$var wire 5 - Y1 [4:0] $end
$var wire 5 . Y2 [4:0] $end
$var wire 5 / w1 [4:0] $end
$var wire 5 0 w2 [4:0] $end
$var wire 1 " Done $end
$var wire 1 1 C $end
$var reg 1 2 LOAD $end
$var reg 1 3 SHIFT $end
$scope module control0 $end
$var wire 1 ! START $end
$var wire 1 # clock $end
$var wire 1 1 comp $end
$var reg 1 " DONE $end
$var reg 1 4 LOAD $end
$var reg 1 5 SHIFT $end
$var reg 4 6 STATE [3:0] $end
$var reg 4 7 count [3:0] $end
$upscope $end
$scope module dividend $end
$var wire 5 8 A [4:0] $end
$var wire 1 + CLK $end
$var wire 1 ) Load $end
$var wire 1 * SH $end
$var wire 1 ) SU $end
$var wire 5 9 Z [4:0] $end
$var reg 9 : Q [8:0] $end
$upscope $end
$scope module sub0 $end
$var wire 5 ; Cin [4:0] $end
$var wire 5 < Zin [4:0] $end
$var reg 5 = Cout [4:0] $end
$var reg 1 1 comp $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
b1101 <
bz ;
b110 :
bx 9
bz 8
b100 7
b0 6
05
04
x3
x2
01
bx 0
bz /
b100 .
b1101 -
bz ,
z+
x*
x)
b100 (
b1101 '
0&
0%
0$
0#
0"
z!
$end
